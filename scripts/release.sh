#!/usr/bin/env bash

# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Exit on error inside any functions or subshells.
set -o errtrace
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset
# Catch the error in case mysqldump fails (but gzip succeeds) in `mysqldump | gzip`
set -o pipefail

__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${__dir}/libs/logs.sh"
source "${__dir}/libs/git.sh"

# These environment variables can be used to alter the behavior of the release script.

VERSION=${1:-"0.0.0"} # The current version being released

DRY_RUN=${DRY_RUN:-"yes"} # Some kind of fail-safe to ensure that we're only pushing something when we mean it.

COG_CMD=${COG_CMD:-"cog"} # Command used to run `cog`

CODEGEN_PIPELINE_CONFIG=${CODEGEN_PIPELINE_CONFIG:-"${__dir}/../.cog/config.yaml"} # Codegen pipeline config file to use.

PROMQL_BUILDER_REPO=${PROMQL_BUILDER_REPO:-'git@github.com:grafana/promql-builder.git'}

SKIP_VALIDATION=${SKIP_VALIDATION:-"no"}
CLEANUP_WORKSPACE=${CLEANUP_WORKSPACE:-"yes"} # Should the workspace be deleted after the script runs?
WORKSPACE_PATH=${WORKSPACE_PATH:-'./workspace'}

#################
### Usage ###
#################

# LOG_LEVEL=7 ./scripts/release.sh VERSION

#################
### Utilities ###
#################

function clone_promql_builder() {
  local clone_into_dir="${1}"
  shift

  git clone "${PROMQL_BUILDER_REPO}" "${clone_into_dir}"
}

function run_codegen() {
  local extra_parameters="${1}"
  shift

  $COG_CMD generate \
    --config "${CODEGEN_PIPELINE_CONFIG}" \
    --parameters "${extra_parameters}"
}

function run_when_safe() {
  local command=${1}
  shift

  if [ "${DRY_RUN}" == "no" ]; then
    ${command} "$@"
  else
    warning "Dry run enabled: skipping execution of \"${command} $*\""
    info "Run this script with DRY_RUN=no to disable dry-run mode."
  fi
}

############
### Main ###
############

codegen_output_path="${WORKSPACE_PATH}/codegen"
promql_builder_path="${WORKSPACE_PATH}/promql-builder"

function cleanup() {
  debug "Cleaning up workspace"
  rm -rf "${WORKSPACE_PATH}"
}
if [ "${CLEANUP_WORKSPACE}" == "yes" ]; then
  trap cleanup EXIT # run the cleanup() function on exit
fi

release_branch="main"
version_tag="v${VERSION}"

if [ "${DRY_RUN}" == "no" ]; then
  warning "Dry-run is OFF."
else
  notice "Dry-run is ON."
fi

if [ "${SKIP_VALIDATION}" == "yes" ]; then
  warning "Release validation is OFF."
else
  debug "Release validation is ON."
fi

notice "Release branch: ${release_branch}"
debug "Workspace path: ${WORKSPACE_PATH}"
debug "version: ${VERSION}"
debug "tag: ${version_tag}"

# Just in case there are leftovers from a previous run.
rm -rf "${WORKSPACE_PATH}"

info "Cloning promql-builder into ${promql_builder_path}"
clone_promql_builder "${promql_builder_path}"

info "Running cog"
run_codegen "output_dir=${codegen_output_path}/%l,package_version=${VERSION}"

info "Checking out existing release branch in promql-builder"
git_run "${promql_builder_path}" checkout "${release_branch}"
git_run "${promql_builder_path}" pull --ff-only origin "${release_branch}"
git_run "${promql_builder_path}" fetch origin --tags 


debug "Copying generated content to promql-builder"
find "${codegen_output_path}" -maxdepth 1 -mindepth 1 -print | while read -r target; do
  target=${target#"$codegen_output_path/"}

  # By removing the language folder before copying the generated output, we make
  # sure that files that might have been generated by a previous release but
  # aren't in the current workspace are pruned.
  rm -rf "${promql_builder_path:?}/${target}"
  cp -R "${codegen_output_path}/${target}" "${promql_builder_path}"
done

debug "Adding changes to git staging area"
git_run "${promql_builder_path}" add .

has_changes=$(git_has_changes "${promql_builder_path}")
if [ "${has_changes}" != "0" ]; then
  warning "No changes detected in promql-builder: aborting release."
  exit 0
fi

git_run "${promql_builder_path}" commit -m "Release ${version_tag}"

if [ "${SKIP_VALIDATION}" == "yes" ]; then
  warning "Skipping release validation"
else
  info "Validating release"
  "$__dir/release-validate.sh" "${codegen_output_path}"
fi

info "Publishing ${version_tag} tag"
run_when_safe git_run "${promql_builder_path}" tag "${version_tag}"
run_when_safe git_run "${promql_builder_path}" push origin "${version_tag}"

info "Pushing release branch ${release_branch}"
run_when_safe git_run "${promql_builder_path}" push origin "${release_branch}"
